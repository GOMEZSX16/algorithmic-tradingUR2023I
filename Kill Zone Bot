import pandas as pd
import MetaTrader5 as mt5
import datetime
import pytz 


nombre = 1051644390
clave = '3Z8E17WK2N'
servidor = 'FTMO-Demo'
path = r'C:\Program Files\MetaTrader 5\terminal64.exe'


mt5.initialize(login = nombre, password = clave, server = servidor, path = path)

def extraer_datos(simbolo,num_periodos,timeframe):
    rates = mt5.copy_rates_from_pos(simbolo,timeframe,0,num_periodos)
    tabla = pd.DataFrame(rates)
    tabla['time'] = pd.to_datetime(tabla['time'], unit = 's')
    
    return tabla

def is_kill_zone():
    ny_timezone = pytz.timezone('America/New_York')
    current_time = datetime.datetime.now(ny_timezone)
    current_hour = current_time.hour
    return 2 <= current_hour <= 5

def calculate_position_size(symbol, tradeinfo, per_to_risk):
    print(symbol)

    mt5.symbol_select(symbol, True)
    symbol_info_tick = mt5.symbol_info_tick(symbol)
    symbol_info = mt5.symbol_info(symbol)
    current_price = (symbol_info_tick.bid + symbol_info_tick.ask) / 2
    sl = tradeinfo
    tick_size = symbol_info.trade_tick_size
    balance = mt5.account_info().balance
    risk_per_trade = per_to_risk
    ticks_at_risk = abs(current_price - sl) / tick_size
    tick_value = symbol_info.trade_tick_value
    position_size = round((balance * risk_per_trade) / (ticks_at_risk * tick_value),2)
    
    return position_size


def enviar_operaciones(simbolo,tipo_operacion, precio_tp,precio_sl,volumen_op):
    orden = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": simbolo,
                "volume" : volumen_op,
                "type" : tipo_operacion,
                "magic": 202304,
                "comment": 'Bot GOMEZSX16',
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_IOC
                }

    mt5.order_send(orden)


symbol = 'US30.cash'
timeframe = mt5.TIMEFRAME_M5

# Variable para controlar si ya se ha enviado una orden en la Kill Zone actual
orden_enviada = False

def send_orders_based_on_breakout(symbol, timeframe):
    if is_kill_zone():
        return  # No se realizan operaciones durante la Kill Zone

    # Obtener los datos del último periodo
    df = extraer_datos(symbol, 1, timeframe)

    # Obtener el precio de cierre más reciente
    current_price = df['close'].iloc[-1]

    # Obtener el rango de la Kill Zone
    kill_zone_start = datetime.time(2, 0, 0)  # Hora de inicio de la Kill Zone
    kill_zone_end = datetime.time(5, 0, 0)  # Hora de finalización de la Kill Zone
    df_kill_zone = extraer_datos(symbol, 100, timeframe)  # Obtener suficientes datos para cubrir la Kill Zone
    kill_zone_prices = df_kill_zone[(df_kill_zone['time'].dt.time >= kill_zone_start) & (df_kill_zone['time'].dt.time <= kill_zone_end)]['close']
    kill_zone_high = kill_zone_prices.max()
    kill_zone_low = kill_zone_prices.min()

    # Calcular los niveles de stop loss y take profit
    stop_loss = (kill_zone_high + kill_zone_low) / 2
    take_profit = stop_loss + 3 * (stop_loss - current_price)

    # Calcular el tamaño de posición basado en el riesgo del 0.5% de la cuenta
    position_size = calculate_position_size(symbol, stop_loss, 0.005)

    # Comprobar si el precio actual rompió por encima del máximo de la Kill Zone
    if current_price > kill_zone_high:
        # Colocar una orden de compra con el tamaño de posición y los niveles de toma de ganancia y stop loss calculados
        enviar_operaciones(symbol, mt5.ORDER_TYPE_BUY, take_profit, stop_loss, position_size)

    # Comprobar si el precio actual rompió por debajo del mínimo de la Kill Zone
    elif current_price < kill_zone_low:
        # Colocar una orden de venta con el tamaño de posición y los niveles de toma de ganancia y stop loss calculados
        enviar_operaciones(symbol, mt5.ORDER_TYPE_SELL, take_profit, stop_loss, position_size)
